JavaScript provides seven different data types which are undefined, null, boolean, string, symbol, number, and object.

Variables allow computers to store and manipulate data in a dynamic fashion. 
They do this by using a "label" to point to the data rather than using the data itself. 
Any of the seven data types may be stored in a variable.

All variables and function names are case sensitive. This means that capitalization matters.

function convertToF(celsius) {
  var fahrenheit;
  // Only change code below this line
  fahrenheit =  celsius * 9/5 + 32;  
  
  // Only change code above this line
  return fahrenheit;
}

// Change the inputs below to test your code
convertToF(30);


Here is a table of common escape sequences:

Code	Output
\'	single quote
\"	double quote
\\	backslash
\n	newline
\r	carriage return
\t	tab
\b	backspace
\f	form feed

.length
var lastNameLength = 0;
var lastName = "Lovelace";
lastNameLength = lastName.length;


Bracket notation is a way to get a character at a specific index within a string.
Use Bracket Notation to Find the NthtoLast Character in a String
  var secondToLastLetterOfLastName = lastName[lastName.length - 2];
  
Word Blanks game
You will create an (optionally humorous) "Fill in the Blanks" style sentence.
  function wordBlanks(myNoun, myAdjective, myVerb, myAdverb) {
    var result = "";
    var space = " ";
    result = "My " + myAdjective + space + myNoun + space + myVerb + space + myAdverb + " on the fence.";
    return result;
  }
  wordBlanks("dog", "big", "ran", "quickly");
  
Store Multiple Values in one Variable using JavaScript Arrays
  var ourArray = ["John", 23];

Nest one Array within Another Array - Multi-dimensional array
  var myArray = [["Guitar", 1], ["Dog", 2]];

Modify Array Data With Indexes
  var myArray = [1,2,3];
  myArray[0] = 3; //[3,2,3]

multi-dimensional array, is as an array of arrays
  var myArray = [[1,2,3], [4,5,6], [7,8,9], [[10,11,12], 13, 14]];
  var myData = myArray[2][1];
  
Append data to the array using pish()
  var myArray = [["John", 23], ["cat", 2]];
  myArray.push(["dog", 3]);
  
.pop() is used to "pop" a value off of the end of an array. We can store this "popped off" value by assigning it to a variable.
  var myArray = [["John", 23], ["cat", 2]];
  var removedFromMyArray = myArray.pop(); // [["John", 23]] --> myArray and removedFromArray has ["cat", 2]
  
.shift() - It works just like .pop(), except it removes the first element instead of the last.
  var removedFromMyArray = myArray.shift(); //["John", 23]
  
.unshift() works exactly like .push(), but instead of adding the element at the end of the array, unshift() adds the element at the beginning of the array.
  var myArray = [["John", 23], ["dog", 3]];
  myArray.shift(); //removes John
  myArray.unshift(["Paul", 35]); // adds Paul to myArray and becomes Paul, dog
  
Shopping List
  var myList = [];
  myList.push(["Milk", 1]);
  myList.push(["Roti", 10]);
  myList.push(["Butter", 3]);
  myList.push(["Chocolate", 2]);
  myList.push(["Yogurt", 5]);

we can divide up our code into reusable parts called functions.
  function reusableFunction() {
    console.log("Hi World");
  }
  reusableFunction();

Add functions
  function functionWithArgs(a, b) {
    console.log(a + b);
  }

  functionWithArgs(3,5);
  
Scope refers to the visibility of variables.Variables which are defined outside of a function block have Global scope. This means, they can be seen everywhere in your JavaScript code.
  // Declare your variable here
  var myGlobal = 10;

  function fun1() {
    // Assign 5 to oopsGlobal Here
    oopsGlobal = 5;
  }

  // Only change code above this line
  function fun2() {
    var output = "";
    if (typeof myGlobal != "undefined") {
      output += "myGlobal: " + myGlobal; // 10
    }
    if (typeof oopsGlobal != "undefined") {
      output += " oopsGlobal: " + oopsGlobal; //5
    }
    console.log(output);
  }

It is possible to have both local and global variables with the same name. When you do this, the local variable takes precedence over the global variable.


